# generated by fastapi-codegen:
#   filename:  specification.yaml
#   timestamp: 2024-01-29T08:45:07+00:00

from __future__ import annotations

from typing import List, Union

from fastapi import FastAPI, Path

from database.models import Error, Student, StudentsPostResponse

from database.mongo import get_database

app = FastAPI(
    title='Student Management API',
    version='2.0.0',
    description="Manage a student's record",
    # servers=[{'url': 'http://localhost:9000/student_management_api/v2'}],
)

collection = get_database()['students']

@app.post(
    '/students', response_model=None, responses={'201': {'model': StudentsPostResponse}}
)
def create_student(body: Student = None) -> Union[None, StudentsPostResponse]:
    """
    Create a new student
    """
    try:
        collection.insert_one(body.dict())
        return StudentsPostResponse(message='Student created successfully')
    except:
        return Error(message='Student already exists')


@app.get(
    '/students', response_model=List[Student], responses={'default': {'model': Error}}
)
def get_all_students() -> Union[List[Student], Error]:
    """
    Fetch all students
    """
    students = []
    for student in collection.find():
        students.append(student)
        
    return students


@app.get(
    '/students/{studentNumber}',
    response_model=Student,
    responses={'default': {'model': Error}},
)
def lookup_student(
    student_number: int = Path(..., alias='studentNumber')
) -> Union[Student, Error]:
    """
    Lookup a Single Student
    """
    student = collection.find_one({'student_number': student_number})
    if student:
        return student
    else:
        return Error(message='Student not found')
    


@app.put('/students/{studentNumber}', response_model=Student)
def update_student_details(
    student_number: int = Path(..., alias='studentNumber'), body: Student = None
) -> Student:
    """
    Update Student Details
    """
    collection.update_one({'student_number': student_number}, {'$set': body.dict()})
    return body


@app.delete('/students/{studentNumber}', response_model=None)
def delete_student(student_number: int = Path(..., alias='studentNumber')) -> None:
    """
    Delete a student
    """
    collection.delete_one({'student_number': student_number})
